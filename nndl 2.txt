//Verify Installations

import tensorflow as tf
import keras
import torch

print("TensorFlow version:", tf.__version__)
print("Keras version:", keras.__version__)
print("PyTorch version:", torch.__version__)



//neural network code in TensorFlow/Keras that you can run in Spyder
import tensorflow as tf
from tensorflow.keras import layers

# Create a simple neural network
model = tf.keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(784,)),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Dummy data for testing
import numpy as np
train_data = np.random.rand(100, 784)  # 100 samples, 784 features
train_labels = np.random.randint(0, 10, 100)  # 100 labels (0-9)

# Train the model
model.fit(train_data, train_labels, epochs=5, batch_size=32)



//PyTorch code example for training a simple neural network in Spyder:


import torch
import torch.nn as nn
import torch.optim as optim

# Simple Neural Network
model = nn.Sequential(
    nn.Linear(784, 64),  # Input layer: 784 -> Hidden layer: 64
    nn.ReLU(),           # Activation function
    nn.Linear(64, 10)    # Hidden layer: 64 -> Output layer: 10
)

# Loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Dummy data
train_data = torch.randn(100, 784)  # 100 samples, 784 features
train_labels = torch.randint(0, 10, (100,))  # 100 labels (0-9)

# Training loop
for epoch in range(5):  # 5 epochs
    optimizer.zero_grad()
    loss = criterion(model(train_data), train_labels)  # Forward + Loss
    loss.backward()
    optimizer.step()

    print(f"Epoch {epoch+1}, Loss: {loss.item()}")

